%{ 	 
#include <math.h> 
#include <stdio.h>
#include "y.tab.h"
%} 
%option noyywrap

INTEGER	    [0-9]+
FLOAT       [0-9]+[.][0-9]+
STRING		["][^.*"]*["]
CHARACTER	"'"[^.]"'"
IDENTIFIER	[a-zA-Z_]([a-zA-Z_]|[0-9])*
SEPARATOR   [()\[\]{};:,]
OPERATOR    [\+\-*/%=<>]
%%

"and"		{printf("Reserved: %s\n", yytext ); return AND;}
"or"		{printf("Reserved: %s\n", yytext ); return OR;}

"&&"		{printf("Reserved: %s\n", yytext ); return ANDAND;}
"||"		{printf("Reserved: %s\n", yytext ); return OROR;}
"!"		    {printf("Reserved: %s\n", yytext ); return NOT;}

"break"		{printf("Reserved: %s\n", yytext ); return BREAK;}
"continue"  {printf("Reserved: %s\n", yytext ); return CONTINUE;}
"pass"		{printf("Reserved: %s\n", yytext ); return PASS;}
"do"		{printf("Reserved: %s\n", yytext ); return DO;}
"if"		{printf("Reserved: %s\n", yytext ); return IF;}
"else"		{printf("Reserved: %s\n", yytext ); return ELSE;}
"while"		{printf("Reserved: %s\n", yytext ); return WHILE;}
"return"    {printf("Reserved: %s\n", yytext ); return RETURN;}
"start"		{printf("Reserved: %s\n", yytext ); return START;}
"print"		{printf("Reserved: %s\n", yytext ); return PRINT;}
"read"		{printf("Reserved: %s\n", yytext ); return READ;}

"Integer"   {printf("Reserved: %s\n", yytext ); return INTEGER;}
"String"    {printf("Reserved: %s\n", yytext ); return STRING;}
"Float"		{printf("Reserved: %s\n", yytext ); return FLOAT;}

"+"			{printf("Reserved: %s\n", yytext ); return PLUS;}
"-"			{printf("Reserved: %s\n", yytext ); return MINUS;}
"*"			{printf("Reserved: %s\n", yytext ); return MULTIPLICATION;}
"%"			{printf("Reserved: %s\n", yytext ); return MOD;}
"="			{printf("Reserved: %s\n", yytext ); return EQUAL;}
"<"			{printf("Reserved: %s\n", yytext ); return LESS;}
">"			{printf("Reserved: %s\n", yytext ); return GREATER;}
"<="		{printf("Reserved: %s\n", yytext ); return LESS_OR_EQUAL;}
">="		{printf("Reserved: %s\n", yytext ); return GREATER_OR_EQUAL;}
"!="		{printf("Reserved: %s\n", yytext ); return NOT_EQUAL;}
"++"		{printf("Reserved: %s\n", yytext ); return INCREMENT;}
"--"		{printf("Reserved: %s\n", yytext ); return DECREMENT;}

"{"			{printf( "%s\n", yytext ); return LEFT_CURLY_BRACKETS;}
"}"			{printf( "%s\n", yytext ); return RIGHT_CURLY_BRACKETS;}
"("			{printf( "%s\n", yytext ); return LEFT_ROUND_PARENTHESIS;}
")"			{printf( "%s\n", yytext ); return RIGHT_ROUND_PARENTHESIS;}
"["			{printf( "%s\n", yytext ); return LEFT_SQUARE_PARENTHESIS;}
"]"			{printf( "%s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS;}
";"			{printf( "%s\n", yytext ); return SEMICOLON;}
":"			{printf( "%s\n", yytext ); return COLON;}
","			{printf( "%s\n", yytext ); return COMMA;}

{INTEGER}    {printf("Integer: %d\n", atoi(yytext)); return INTEGER;}
{STRING}     {printf("String: %s\n", yytext); return STRING;}
{CHARACTER}  {printf("Character %s\n", yytext); return CHARACTER;}
{FLOAT}      {printf("Float: %s\n", yytext); return FLOAT;}
{IDENTIFIER} {printf("Identifier: %s\n", yytext); return IDENTIFIER;}

[ \t\n]+ 	     		/* eat up whitespace */ 
[\r\n]

[0-9]([a-zA-Z_]|[0-9])*   {printf("\t\tIllegal Identifier: %s\n", yytext);}
.            {printf("\t\tERROR: %s\n", yytext);}

%%